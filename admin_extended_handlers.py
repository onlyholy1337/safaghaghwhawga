# admin_extended_handlers.py

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, desc, asc, func
import asyncio
import logging

from keyboards import (get_admin_category_manage_kb, AdminMenuCallback,
                       AdminCategoryCallback, get_admin_main_kb, AdminReviewCallback,
                       get_admin_review_keyboard, get_admin_stats_kb,
                       AdminMailingCallback, get_admin_mailing_confirm_kb)
from database import Category, Review, User, MasterProfile, TattooWork
from states import AdminCategoryManagement, AdminReviewManagement, AdminMailing
from admin_handlers import IsAdmin

router = Router()
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


# --- –û–ë–†–ê–ë–û–¢–ö–ê –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ –ê–î–ú–ò–ù–ö–ò ---

@router.callback_query(AdminMenuCallback.filter(F.action == "main"))
async def back_to_main_admin_menu(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
        reply_markup=get_admin_main_kb()
    )


@router.callback_query(AdminMenuCallback.filter(F.action.in_([
    "work_management", "payment_management"
])))
async def section_in_development(query: CallbackQuery):
    await query.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ---

@router.callback_query(AdminMenuCallback.filter(F.action == "category_management"))
async def manage_categories(query: CallbackQuery, session: AsyncSession):
    categories = await session.scalars(select(Category).order_by(Category.name))
    await query.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å—Ç–∏–ª—è–º–∏) —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫:",
        reply_markup=get_admin_category_manage_kb(list(categories.all()))
    )


@router.callback_query(AdminCategoryCallback.filter(F.action == "add"))
async def add_category_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminCategoryManagement.waiting_for_name)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await query.answer()


@router.message(AdminCategoryManagement.waiting_for_name, F.text)
async def add_category_process(message: Message, state: FSMContext, session: AsyncSession):
    new_category_name = message.text.strip()

    existing = await session.scalar(select(Category).where(Category.name == new_category_name))
    if existing:
        await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    new_category = Category(name=new_category_name)
    session.add(new_category)
    await session.commit()
    await state.clear()

    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{new_category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

    categories = await session.scalars(select(Category).order_by(Category.name))
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å—Ç–∏–ª—è–º–∏) —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫:",
        reply_markup=get_admin_category_manage_kb(list(categories.all()))
    )


@router.callback_query(AdminCategoryCallback.filter(F.action == "delete"))
async def delete_category(query: CallbackQuery, callback_data: AdminCategoryCallback, session: AsyncSession):
    category_id = callback_data.category_id
    category_name = callback_data.category_name

    await session.execute(delete(Category).where(Category.id == category_id))
    await session.commit()

    await query.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)

    categories = await session.scalars(select(Category).order_by(Category.name))
    await query.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Å—Ç–∏–ª—è–º–∏) —Ç–∞—Ç—É–∏—Ä–æ–≤–æ–∫:",
        reply_markup=get_admin_category_manage_kb(list(categories.all()))
    )


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–¢–ó–´–í–ê–ú–ò ---

async def get_review_info_text(review: Review, session: AsyncSession) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞."""
    client = await session.get(User, review.client_id)
    master_profile = await session.get(MasterProfile, review.master_id)
    master_user = await session.get(User, master_profile.user_id)

    rating_stars = "‚≠ê" * review.rating + "‚òÜ" * (5 - review.rating)

    return (
        f"<b>–û—Ç–∑—ã–≤ #{review.id}</b>\n\n"
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> @{client.username} (ID: <code>{client.telegram_id}</code>)\n"
        f"<b>–ú–∞—Å—Ç–µ—Ä:</b> @{master_user.username} (ID: <code>{master_user.telegram_id}</code>)\n"
        f"<b>–†–∞–±–æ—Ç–∞ ID:</b> {review.work_id}\n"
        f"<b>–û—Ü–µ–Ω–∫–∞:</b> {rating_stars}\n\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n<i>{review.text}</i>\n\n"
        f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n<i>{review.admin_reply or '–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞.'}</i>"
    )


async def show_review_for_admin(query: CallbackQuery, session: AsyncSession, review_id: int = None,
                                direction: str = 'first'):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–∑—ã–≤ –∞–¥–º–∏–Ω—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    stmt = None
    if direction == 'first':
        stmt = select(Review).order_by(desc(Review.id)).limit(1)
    elif direction == 'next':
        stmt = select(Review).where(Review.id < review_id).order_by(desc(Review.id)).limit(1)
    elif direction == 'prev':
        stmt = select(Review).where(Review.id > review_id).order_by(asc(Review.id)).limit(1)

    review = await session.scalar(stmt)

    if not review:
        if direction == 'first':
            await query.message.edit_text("–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            await query.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –æ—Ç–∑—ã–≤ –≤ —Å–ø–∏—Å–∫–µ.", show_alert=True)
        return

    text = await get_review_info_text(review, session)
    keyboard = get_admin_review_keyboard(review.id)
    await query.message.edit_text(text, reply_markup=keyboard)
    await query.answer()


@router.callback_query(AdminMenuCallback.filter(F.action == "review_management"))
async def start_review_management(query: CallbackQuery, session: AsyncSession):
    await show_review_for_admin(query, session, direction='first')


@router.callback_query(AdminReviewCallback.filter(F.action.in_(['prev', 'next'])))
async def paginate_reviews(query: CallbackQuery, callback_data: AdminReviewCallback, session: AsyncSession):
    await show_review_for_admin(query, session, review_id=callback_data.review_id, direction=callback_data.action)


@router.callback_query(AdminReviewCallback.filter(F.action == "delete"))
async def delete_review(query: CallbackQuery, callback_data: AdminReviewCallback, session: AsyncSession):
    review_id = callback_data.review_id
    await session.execute(delete(Review).where(Review.id == review_id))
    await session.commit()
    await query.answer("–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω.", show_alert=True)
    await show_review_for_admin(query, session, direction='first')


@router.callback_query(AdminReviewCallback.filter(F.action == "reply"))
async def start_reply_to_review(query: CallbackQuery, callback_data: AdminReviewCallback, state: FSMContext):
    await state.set_state(AdminReviewManagement.waiting_for_reply)
    await state.update_data(review_id=callback_data.review_id)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤:")
    await query.answer()


@router.message(AdminReviewManagement.waiting_for_reply, F.text)
async def process_review_reply(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    review_id = data.get("review_id")
    reply_text = message.text

    review = await session.get(Review, review_id)
    if not review:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–∑—ã–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return

    review.admin_reply = reply_text
    await session.commit()
    await state.clear()

    await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–∞—Å—Ç–µ—Ä—É.")

    try:
        master_profile = await session.get(MasterProfile, review.master_id)
        master_user = await session.get(User, master_profile.user_id)
        await message.bot.send_message(
            master_user.telegram_id,
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ—Ç–∑—ã–≤ #{review.id}:\n\n<i>{reply_text}</i>"
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {master_user.telegram_id}: {e}")


# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---

@router.callback_query(AdminMenuCallback.filter(F.action == "statistics"))
async def show_statistics(query: CallbackQuery, session: AsyncSession):
    total_users = await session.scalar(select(func.count(User.id)))
    total_masters = await session.scalar(select(func.count(User.id)).where(User.role == 'master'))
    total_clients = await session.scalar(select(func.count(User.id)).where(User.role == 'client'))

    total_works = await session.scalar(select(func.count(TattooWork.id)))
    published_works = await session.scalar(select(func.count(TattooWork.id)).where(TattooWork.status == 'published'))
    pending_works = await session.scalar(
        select(func.count(TattooWork.id)).where(TattooWork.status == 'pending_approval'))
    rejected_works = await session.scalar(select(func.count(TattooWork.id)).where(TattooWork.status == 'rejected'))

    total_reviews = await session.scalar(select(func.count(Review.id)))

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞</b>\n\n"
        "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"  - –í—Å–µ–≥–æ: <b>{total_users}</b>\n"
        f"  - –ú–∞—Å—Ç–µ—Ä–æ–≤: <b>{total_masters}</b>\n"
        f"  - –ö–ª–∏–µ–Ω—Ç–æ–≤: <b>{total_clients}</b>\n\n"
        "üé® <b>–†–∞–±–æ—Ç—ã:</b>\n"
        f"  - –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{total_works}</b>\n"
        f"  - –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: <b>{published_works}</b>\n"
        f"  - –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{pending_works}</b>\n"
        f"  - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_works}</b>\n\n"
        "‚≠êÔ∏è <b>–û—Ç–∑—ã–≤—ã:</b>\n"
        f"  - –í—Å–µ–≥–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>{total_reviews}</b>"
    )

    await query.message.edit_text(stats_text, reply_markup=get_admin_stats_kb())
    await query.answer()


# --- –†–ê–°–°–´–õ–ö–ê ---

@router.callback_query(AdminMenuCallback.filter(F.action == "mailing"))
async def start_mailing(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminMailing.waiting_for_message_content)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>–≤—Å–µ–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    await query.answer()


@router.message(AdminMailing.waiting_for_message_content)
async def mailing_content_received(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(AdminMailing.waiting_for_confirmation)

    await message.answer(
        "<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
        f"{message.html_text}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?",
        reply_markup=get_admin_mailing_confirm_kb()
    )


@router.callback_query(AdminMailing.waiting_for_confirmation, AdminMailingCallback.filter(F.action == "cancel"))
async def cancel_mailing(query: CallbackQuery, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    await query.answer()


@router.callback_query(AdminMailing.waiting_for_confirmation, AdminMailingCallback.filter(F.action == "send"))
async def process_mailing(query: CallbackQuery, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    text = data.get("text")
    await state.clear()

    await query.message.edit_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=None)

    users_result = await session.execute(select(User.telegram_id))
    user_ids = users_result.scalars().all()

    successful_sends = 0
    failed_sends = 0

    for user_id in user_ids:
        try:
            await query.bot.send_message(chat_id=user_id, text=text, disable_web_page_preview=True)
            successful_sends += 1
        except Exception as e:
            failed_sends += 1
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await asyncio.sleep(0.1)

    await query.message.answer(
        "‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{successful_sends}</b>\n"
        f"–û—à–∏–±–æ–∫: <b>{failed_sends}</b>"
    )