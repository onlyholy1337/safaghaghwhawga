# --- file: admin_handlers.py ---

from aiogram import Router, F, types
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from config import settings
from database import TattooWork, MasterProfile, User, Category # –î–æ–±–∞–≤–∏–ª–∏ Category
from keyboards import AdminModerationCallback, get_admin_main_kb, get_admin_user_manage_kb, AdminUserActionCallback, AdminMenuCallback
from states import AdminUserSearch

router = Router()


class IsAdmin(Filter):
    def __init__(self) -> None:
        self.admin_ids = [int(i) for i in settings.admin_ids.split(',')]

    async def __call__(self, message: types.TelegramObject) -> bool:
        return message.from_user.id in self.admin_ids


router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


@router.message(Command("admin"))
async def cmd_admin_panel(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_main_kb())


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---

@router.callback_query(AdminMenuCallback.filter(F.action == "user_management"))
async def start_user_search(query: CallbackQuery, state: FSMContext):
    await state.set_state(AdminUserSearch.waiting_for_user_id)
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.")
    await query.answer()


@router.message(AdminUserSearch.waiting_for_user_id, F.text)
async def process_user_search(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return

    user_id = int(message.text)
    user = await session.scalar(select(User).where(User.telegram_id == user_id))

    if not user:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    is_active = True
    keyboard = None

    user_info = (
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:</b>\n\n"
        f"Telegram ID: `{user.telegram_id}`\n"
        f"Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n"
        f"–†–æ–ª—å: <b>{user.role.upper()}</b>"
    )

    if user.role == 'master':
        master_profile = await session.scalar(select(MasterProfile).where(MasterProfile.user_id == user.id))
        if master_profile:
            is_active = master_profile.is_active
            user_info += f"\n–°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–µ–Ω' if is_active else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"
            keyboard = get_admin_user_manage_kb(user_id=user.id, is_active=is_active, role=user.role)

    await message.answer(user_info, reply_markup=keyboard)
    await state.clear()


@router.callback_query(AdminUserActionCallback.filter(F.action.in_(['block', 'unblock', 'revoke_master'])))
async def block_unblock_user(query: CallbackQuery, callback_data: AdminUserActionCallback, session: AsyncSession):
    user_to_manage = await session.get(User, callback_data.user_id)
    if not user_to_manage or user_to_manage.role != 'master':
        await query.answer("–ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–∞.", show_alert=True)
        return

    master_profile = await session.scalar(select(MasterProfile).where(MasterProfile.user_id == user_to_manage.id))
    if not master_profile:
        await query.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if callback_data.action == 'block':
        master_profile.is_active = False
        action_text = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    else:  # unblock
        master_profile.is_active = True
        action_text = "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

    await session.commit()
    await query.answer(f"–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ {action_text}.")

    keyboard = get_admin_user_manage_kb(user_id=user_to_manage.id, is_active=master_profile.is_active)
    await query.message.edit_reply_markup(reply_markup=keyboard)

    try:
        await query.bot.send_message(user_to_manage.telegram_id,
                                     f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞ –±—ã–ª {action_text} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_manage.telegram_id}: {e}")

    if callback_data.action == 'revoke_master':
        user_to_manage.role = 'client'
        if master_profile:
            # –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç—ã –º–∞—Å—Ç–µ—Ä–∞ –∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å
            await session.execute(delete(TattooWork).where(TattooWork.master_id == master_profile.id))
            await session.delete(master_profile)
        action_text = "–ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞"

        await session.commit()
        await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏—à–µ–Ω —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞.", show_alert=True)
        await query.message.edit_text("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω. –û–Ω –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä–æ–º.")

        try:
            await query.bot.send_message(user_to_manage.telegram_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ª–∏—à–∏–ª –≤–∞—Å —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Å—Ç–µ—Ä–∞.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_to_manage.telegram_id}: {e}")
        return

    await session.commit()
    await query.answer(f"–ú–∞—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ {action_text}.")
    # üëá –ò–ó–ú–ï–ù–Ø–ï–ú –í–´–ó–û–í, –î–û–ë–ê–í–õ–Ø–ï–ú user_to_manage.role
    keyboard = get_admin_user_manage_kb(user_id=user_to_manage.id, is_active=master_profile.is_active,
                                        role=user_to_manage.role)
    await query.message.edit_reply_markup(reply_markup=keyboard)



# --- –ë–õ–û–ö –ú–û–î–ï–†–ê–¶–ò–ò –†–ê–ë–û–¢ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(AdminModerationCallback.filter(F.action == "approve"))
async def approve_work(query: CallbackQuery, callback_data: AdminModerationCallback, session: AsyncSession):
    work = await session.get(TattooWork, callback_data.work_id)
    if not work:
        await query.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    work.status = 'published'
    await session.commit()
    await query.message.edit_caption(
        caption=query.message.caption + f"\n\n‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ @{query.from_user.username}",
        reply_markup=None
    )
    master_profile = await session.get(MasterProfile, work.master_id)
    user = await session.get(User, master_profile.user_id)
    try:
        await query.bot.send_message(
            chat_id=user.telegram_id,
            text="üéâ –í–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ—à–ª–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {user.telegram_id}: {e}")
    await query.answer("–†–∞–±–æ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")


@router.callback_query(AdminModerationCallback.filter(F.action == "reject"))
async def reject_work(query: CallbackQuery, callback_data: AdminModerationCallback, session: AsyncSession):
    work = await session.get(TattooWork, callback_data.work_id)
    if not work:
        await query.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    work.status = 'rejected'
    await session.commit()
    await query.message.edit_caption(
        caption=query.message.caption + f"\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ @{query.from_user.username}",
        reply_markup=None
    )
    master_profile = await session.get(MasterProfile, work.master_id)
    user = await session.get(User, master_profile.user_id)
    try:
        await query.bot.send_message(
            chat_id=user.telegram_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É {user.telegram_id}: {e}")
    await query.answer("–†–∞–±–æ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
